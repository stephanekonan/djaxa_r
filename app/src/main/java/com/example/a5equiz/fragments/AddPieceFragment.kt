package com.example.a5equiz.fragmentsimport android.app.Dialogimport android.graphics.Colorimport android.graphics.drawable.ColorDrawableimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.AdapterViewimport android.widget.ArrayAdapterimport com.example.a5equiz.Rimport com.example.a5equiz.bases.BaseBottomDialogFragmentimport com.example.a5equiz.config.ConstToastimport com.example.a5equiz.databinding.FragmentRecordPieceBindingimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.firestore.FirebaseFirestoreclass AddPieceFragment : BaseBottomDialogFragment() {    private lateinit var binding: FragmentRecordPieceBinding    private lateinit var firestore: FirebaseFirestore    private lateinit var mAuth: FirebaseAuth    private var categoryIds = mutableListOf<String>()    private var categoryNames = mutableListOf<String>()    private var selectedCategoryId: String? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setStyle(STYLE_NORMAL, R.style.BottomSheetDialogTheme)    }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View {        binding = FragmentRecordPieceBinding.inflate(inflater, container, false)        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        firestore = FirebaseFirestore.getInstance()        mAuth = FirebaseAuth.getInstance()        fetchCategories()        binding.saveRecordBtn.setOnClickListener {            saveRecord()        }        binding.categoryId.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {            override fun onItemSelected(                parent: AdapterView<*>,                view: View?,                position: Int,                id: Long            ) {                selectedCategoryId = categoryIds[position]            }            override fun onNothingSelected(parent: AdapterView<*>) {                selectedCategoryId = null            }        }    }    private fun fetchCategories() {        firestore.collection("categories").get()            .addOnSuccessListener { documents ->                categoryNames.clear()                categoryIds.clear()                for (document in documents) {                    val categoryName = document.getString("name") ?: "Unknown"                    val categoryId = document.id                    categoryNames.add(categoryName)                    categoryIds.add(categoryId)                }                val adapter = ArrayAdapter(                    requireContext(),                    android.R.layout.simple_spinner_item,                    categoryNames                )                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)                binding.categoryId.adapter = adapter            }            .addOnFailureListener { exception ->                Log.w("Firestore", "Error getting categories: ", exception)            }    }    private fun saveRecord() {        val categoryId = selectedCategoryId ?: return        val name = binding.pieceNameInput.text.toString().trim()        val quantity = binding.pieceQuantityInput.text.toString().trim().toIntOrNull() ?: 0        val price = binding.piecePriceInput.text.toString().trim().toDoubleOrNull() ?: 0.0        val piece = hashMapOf(            "categoryId" to categoryId,            "name" to name,            "quantity" to quantity,            "price" to price        )        saveRecordToFirebase(piece)    }    private fun saveRecordToFirebase(piece: Map<String, Any>) {        binding.saveRecordBtn.isEnabled = false        binding.loadingProgressBar.visibility = View.VISIBLE        val userId = mAuth.currentUser?.uid ?: return        val recordRef =            firestore.collection("users").document(userId).collection("pieces").add(piece)        recordRef.addOnCompleteListener { task ->            binding.saveRecordBtn.isEnabled = true            binding.loadingProgressBar.visibility = View.GONE            if (task.isSuccessful) {                showToast(ConstToast.TOAST_TYPE_SUCCESS, "Pièce enregistrée avec succès")                dismiss()            } else {                showToast(                    ConstToast.TOAST_TYPE_ERROR,                    "Erreur lors de l'enregistrement des données"                )            }        }    }    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {        val dialog = super.onCreateDialog(savedInstanceState)        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))        return dialog    }}