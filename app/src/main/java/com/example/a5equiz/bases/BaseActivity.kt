package com.example.a5equiz.basesimport android.content.Intentimport android.os.Bundleimport android.os.Handlerimport android.os.Looperimport android.widget.ImageButtonimport android.widget.ImageViewimport android.widget.LinearLayoutimport android.widget.TextViewimport android.widget.Toastimport androidx.activity.enableEdgeToEdgeimport androidx.appcompat.app.AppCompatActivityimport androidx.core.view.ViewCompatimport androidx.core.view.WindowInsetsCompatimport androidx.core.view.updatePaddingimport com.example.a5equiz.Rimport com.example.a5equiz.activities.LockActivityimport com.example.a5equiz.config.ConstToastimport com.example.a5equiz.config.MyApplicationimport com.google.firebase.auth.FirebaseAuthimport java.util.Localeopen class BaseActivity : AppCompatActivity() {    private lateinit var inactivityHandler: Handler    private val INACTIVITY_TIMEOUT = 1 * 60 * 1000L    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        "fr".setLocale()        enableEdgeToEdge()        inactivityHandler = Handler(Looper.getMainLooper())        resetInactivityTimer()        val myApp = application as MyApplication        if (FirebaseAuth.getInstance().currentUser != null && !myApp.isCodeValidated()) {            lockApp()        }    }    override fun onResume() {        super.onResume()        val myApp = application as MyApplication        if (FirebaseAuth.getInstance().currentUser != null && !myApp.isCodeValidated()) {            lockApp()        }    }    private fun resetInactivityTimer() {        inactivityHandler.removeCallbacks(inactivityRunnable)        inactivityHandler.postDelayed(inactivityRunnable, INACTIVITY_TIMEOUT)    }    private val inactivityRunnable = Runnable {        val myApp = application as MyApplication        if (FirebaseAuth.getInstance().currentUser != null && !myApp.isCodeValidated()) {            lockApp()        }    }    private fun lockApp() {        val intent = Intent(this, LockActivity::class.java)        startActivity(intent)        finish()    }    override fun onUserInteraction() {        super.onUserInteraction()        resetInactivityTimer()    }    private fun String.setLocale() {        val locale = Locale(this)        Locale.setDefault(locale)        val config = resources.configuration        config.setLocale(locale)        resources.updateConfiguration(config, resources.displayMetrics)    }    fun setupBackButton(buttonId: Int) {        val btnToBack = findViewById<ImageButton>(buttonId)        btnToBack.setOnClickListener { finish() }    }    fun setupEdgeToEdge(viewId: Int) {        ViewCompat.setOnApplyWindowInsetsListener(findViewById(viewId)) { v, insets ->            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())            v.updatePadding(                left = systemBars.left,                top = systemBars.top,                right = systemBars.right,                bottom = systemBars.bottom            )            insets        }    }    fun showToast(toastType: Int, message: CharSequence) {        val toastView = layoutInflater.inflate(            R.layout.layout_toast,            findViewById(R.id.layoutToastContainer)        )        val toastLayoutContainer = toastView.findViewById<LinearLayout>(R.id.layoutToastContainer)        val imageIcon = toastView.findViewById<ImageView>(R.id.imageIcon)        val textMessage = toastView.findViewById<TextView>(R.id.textMessage)        when (toastType) {            ConstToast.TOAST_TYPE_SUCCESS -> {                toastLayoutContainer.setBackgroundResource(R.drawable.bg_toast_success)                imageIcon.setImageResource(R.drawable.ic_check_circle)                textMessage.text = message            }            ConstToast.TOAST_TYPE_ERROR -> {                toastLayoutContainer.setBackgroundResource(R.drawable.bg_toast_error)                imageIcon.setImageResource(R.drawable.ic_error)                textMessage.text = message            }            ConstToast.TOAST_TYPE_WARNING -> {                toastLayoutContainer.setBackgroundResource(R.drawable.bg_toast_warning)                imageIcon.setImageResource(R.drawable.ic_warning)                textMessage.text = message            }        }        with(Toast(applicationContext)) {            duration = Toast.LENGTH_SHORT            view = toastView            show()        }    }}